{
	"info": {
		"_postman_id": "e08dc22a-45d3-4ead-8a5c-78551c8cdfeb",
		"name": "Practice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET req (Variable)",
			"item": [
				{
					"name": "GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let envVar = pm.environment.set(\"Hey\");\r",
									"pm.environment.get(envVar);\r",
									"console.log(envVar = \"Hello\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}api/users?page=2",
							"host": [
								"{{url}}api"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let varurl = pm.variables.get(\"url\");\r",
									"console.log(\"This is the URL:\" + \" \" + varurl);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}api/users?page=1",
							"host": [
								"{{url}}api"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"First Nmae is String\", ()=>{\r",
									"\r",
									"    for (var i = 0; i < response.data.length; i++){\r",
									"    pm.expect(response.data[i].first_name).to.be.a(\"string\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}api/users?page=1",
							"host": [
								"{{url}}api"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET singleuser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"ID is number\", ()=> {\r",
									"    pm.expect(response.data.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}api/users/2",
							"host": [
								"{{url}}api"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST req",
			"item": [
				{
					"name": "POST 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Morpheus\",\r\n    \"job\": \"Leader\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}api/users",
							"host": [
								"{{url}}api"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Login Succesful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response Body has Token\", function () {\r",
									"    pm.expect(responseBody.has == \"token\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}api/login",
							"host": [
								"{{url}}api"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Login Unsuccesful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}api/login",
							"host": [
								"{{url}}api"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Req (Schema and Single user register)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"title\": \"The root schema\",\r",
									"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
									"    \"default\": {},\r",
									"    \"required\": [\r",
									"        \"name\",\r",
									"        \"Father's Name\",\r",
									"        \"Designation\",\r",
									"        \"id\",\r",
									"        \"createdAt\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"name\": {\r",
									"            \"$id\": \"#/properties/name\",\r",
									"            \"type\": \"string\",\r",
									"            \"title\": \"The name schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": \"\"\r",
									"        },\r",
									"        \"Father's Name\": {\r",
									"            \"$id\": \"#/properties/Father%27s%20Name\",\r",
									"            \"type\": \"string\",\r",
									"            \"title\": \"The Father's Name schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": \"\"\r",
									"        },\r",
									"        \"Designation\": {\r",
									"            \"$id\": \"#/properties/Designation\",\r",
									"            \"type\": \"string\",\r",
									"            \"title\": \"The Designation schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": \"\"\r",
									"        },\r",
									"        \"id\": {\r",
									"            \"$id\": \"#/properties/id\",\r",
									"            \"type\": \"number\",\r",
									"            \"title\": \"The id schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": 0\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"            \"$id\": \"#/properties/createdAt\",\r",
									"            \"type\": \"string\",\r",
									"            \"title\": \"The createdAt schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": \"\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation of the Response' , function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Ali\",\r\n    \"Father's Name\": \"Saeed\",\r\n    \"Designation\": \"SQA\",\r\n    \"id\": 208,\r\n    \"createdAt\": \"2021-08-13T07:27:03.635Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}api/users",
							"host": [
								"{{url}}api"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT",
			"item": [
				{
					"name": "PUT req",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"title\": \"The root schema\",\r",
									"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
									"    \"default\": {},\r",
									"    \"required\": [\r",
									"        \"meta\",\r",
									"        \"data\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"meta\": {\r",
									"            \"$id\": \"#/properties/meta\",\r",
									"            \"type\": \"null\",\r",
									"            \"title\": \"The meta schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": null\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"$id\": \"#/properties/data\",\r",
									"            \"type\": \"object\",\r",
									"            \"title\": \"The data schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": {},\r",
									"            \"required\": [\r",
									"                \"email\",\r",
									"                \"name\",\r",
									"                \"gender\",\r",
									"                \"status\",\r",
									"                \"id\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"email\": {\r",
									"                    \"$id\": \"#/properties/data/properties/email\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The email schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"$id\": \"#/properties/data/properties/name\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The name schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\"\r",
									"                },\r",
									"                \"gender\": {\r",
									"                    \"$id\": \"#/properties/data/properties/gender\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The gender schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\"\r",
									"                },\r",
									"                \"status\": {\r",
									"                    \"$id\": \"#/properties/data/properties/status\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The status schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\"\r",
									"                },\r",
									"                \"id\": {\r",
									"                    \"$id\": \"#/properties/data/properties/id\",\r",
									"                    \"type\": \"number\",\r",
									"                    \"title\": \"The id schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": 0\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test(\"Schema Validation\", function() {\r",
									"    pm.response.to.have.jsonBody(schema);\r",
									"} );\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"pm.test(\"Name is string\", ()=> {\r",
									"    pm.expect(response.data.name).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "ea335b9c4b9b94e566606dd50ff7ee7c285be10789c5581e6e2a964528d0286a",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"post_id\": 3,\r\n    \"name\": \"Nambeesan\",\r\n    \"email\": \"indra_nambeesan@hodkiewicz.net\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\",\r\n    \"body\": \"Magnam rerum dolor. Ut cupiditate aut. Eveniet id odit.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v1/users/31",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v1",
								"users",
								"31"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE req",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/4",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Response Validation",
			"item": [
				{
					"name": "(List of Users) Response Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*pm.test(\"ID is number\", ()=> {\r",
									"    pm.expect(response.data.id).to.be.a(\"number\");\r",
									"});*/                                                                                                       \r",
									"\r",
									"pm.test(\"IDs are number\", ()=> {\r",
									"    for (var i=0;i<response.data.length;i++) {\r",
									"        pm.expect(response.data[i].id).to.be.a(\"number\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"id\": 2,\r\n        \"email\": \"janet.weaver@reqres.in\",\r\n        \"first_name\": \"Janet\",\r\n        \"last_name\": \"Weaver\",\r\n        \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n    },\r\n    \"support\": {\r\n        \"url\": \"https://reqres.in/#support-heading\",\r\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}api/users?page=2",
							"host": [
								"{{url}}api"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(Single User)Response validation with Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"ID is number\", ()=> {\r",
									"    pm.expect(response.data.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Email is String\", ()=> {\r",
									"    pm.expect(response.data.email).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"F.Name is String\", ()=> {\r",
									"    pm.expect(response.data.first_name).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}api/users/1",
							"host": [
								"{{url}}api"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Response Validation W/O Formats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body Contains Name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\", \"last_name\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body Contains User-ID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}api/users?page=1",
							"host": [
								"{{url}}api"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "JSON Schema Validation",
			"item": [
				{
					"name": "JSON Schema (List of Users)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"title\": \"The root schema\",\r",
									"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
									"    \"default\": {},\r",
									"    \"required\": [\r",
									"        \"page\",\r",
									"        \"per_page\",\r",
									"        \"total\",\r",
									"        \"total_pages\",\r",
									"        \"data\",\r",
									"        \"support\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"page\": {\r",
									"            \"$id\": \"#/properties/page\",\r",
									"            \"type\": \"number\",\r",
									"            \"title\": \"The page schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": 0\r",
									"        },\r",
									"        \"per_page\": {\r",
									"            \"$id\": \"#/properties/per_page\",\r",
									"            \"type\": \"number\",\r",
									"            \"title\": \"The per_page schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": 0\r",
									"        },\r",
									"        \"total\": {\r",
									"            \"$id\": \"#/properties/total\",\r",
									"            \"type\": \"number\",\r",
									"            \"title\": \"The total schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": 0\r",
									"        },\r",
									"        \"total_pages\": {\r",
									"            \"$id\": \"#/properties/total_pages\",\r",
									"            \"type\": \"number\",\r",
									"            \"title\": \"The total_pages schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": 0\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"$id\": \"#/properties/data\",\r",
									"            \"type\": \"array\",\r",
									"            \"title\": \"The data schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": [],\r",
									"            \"items\": {\r",
									"                \"$id\": \"#/properties/data/items\",\r",
									"                \"anyOf\": [\r",
									"                    {\r",
									"                        \"$id\": \"#/properties/data/items/anyOf/0\",\r",
									"                        \"type\": \"object\",\r",
									"                        \"title\": \"The first anyOf schema\",\r",
									"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                        \"default\": {},\r",
									"                        \"required\": [\r",
									"                            \"id\",\r",
									"                            \"email\",\r",
									"                            \"first_name\",\r",
									"                            \"last_name\",\r",
									"                            \"avatar\"\r",
									"                        ],\r",
									"                        \"properties\": {\r",
									"                            \"id\": {\r",
									"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/id\",\r",
									"                                \"type\": \"number\",\r",
									"                                \"title\": \"The id schema\",\r",
									"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                                \"default\": 0\r",
									"                            },\r",
									"                            \"email\": {\r",
									"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/email\",\r",
									"                                \"type\": \"string\",\r",
									"                                \"title\": \"The email schema\",\r",
									"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                                \"default\": \"\"\r",
									"                            },\r",
									"                            \"first_name\": {\r",
									"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/first_name\",\r",
									"                                \"type\": \"string\",\r",
									"                                \"title\": \"The first_name schema\",\r",
									"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                                \"default\": \"\"\r",
									"                            },\r",
									"                            \"last_name\": {\r",
									"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/last_name\",\r",
									"                                \"type\": \"string\",\r",
									"                                \"title\": \"The last_name schema\",\r",
									"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                                \"default\": \"\"\r",
									"                            },\r",
									"                            \"avatar\": {\r",
									"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/avatar\",\r",
									"                                \"type\": \"string\",\r",
									"                                \"title\": \"The avatar schema\",\r",
									"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                                \"default\": \"\"\r",
									"                            }\r",
									"                        }\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        },\r",
									"        \"support\": {\r",
									"            \"$id\": \"#/properties/support\",\r",
									"            \"type\": \"object\",\r",
									"            \"title\": \"The support schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": {},\r",
									"            \"required\": [\r",
									"                \"url\",\r",
									"                \"text\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"url\": {\r",
									"                    \"$id\": \"#/properties/support/properties/url\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The url schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\"\r",
									"                },\r",
									"                \"text\": {\r",
									"                    \"$id\": \"#/properties/support/properties/text\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The text schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test('Schema Validation of the Response' , function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"IDs are number\", ()=> {\r",
									"    for (var i=0;i<response.data.length;i++) {\r",
									"        pm.expect(response.data[i].id).to.be.a(\"number\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"id\": 2,\r\n        \"email\": \"janet.weaver@reqres.in\",\r\n        \"first_name\": \"Janet\",\r\n        \"last_name\": \"Weaver\",\r\n        \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n    },\r\n    \"support\": {\r\n        \"url\": \"https://reqres.in/#support-heading\",\r\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}api/users?page=2",
							"host": [
								"{{url}}api"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(Single User) Schema validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"title\": \"The root schema\",\r",
									"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
									"    \"default\": {},\r",
									"    \"required\": [\r",
									"        \"data\",\r",
									"        \"support\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"data\": {\r",
									"            \"$id\": \"#/properties/data\",\r",
									"            \"type\": \"object\",\r",
									"            \"title\": \"The data schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": {},\r",
									"            \"required\": [\r",
									"                \"id\",\r",
									"                \"email\",\r",
									"                \"first_name\",\r",
									"                \"last_name\",\r",
									"                \"avatar\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"$id\": \"#/properties/data/properties/id\",\r",
									"                    \"type\": \"number\",\r",
									"                    \"title\": \"The id schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": 0\r",
									"                },\r",
									"                \"email\": {\r",
									"                    \"$id\": \"#/properties/data/properties/email\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The email schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\"\r",
									"                },\r",
									"                \"first_name\": {\r",
									"                    \"$id\": \"#/properties/data/properties/first_name\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The first_name schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\"\r",
									"                },\r",
									"                \"last_name\": {\r",
									"                    \"$id\": \"#/properties/data/properties/last_name\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The last_name schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\"\r",
									"                },\r",
									"                \"avatar\": {\r",
									"                    \"$id\": \"#/properties/data/properties/avatar\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The avatar schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\"\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"support\": {\r",
									"            \"$id\": \"#/properties/support\",\r",
									"            \"type\": \"object\",\r",
									"            \"title\": \"The support schema\",\r",
									"            \"description\": \"An explanation about the purpose of this instance.\",\r",
									"            \"default\": {},\r",
									"            \"required\": [\r",
									"                \"url\",\r",
									"                \"text\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"url\": {\r",
									"                    \"$id\": \"#/properties/support/properties/url\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The url schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\"\r",
									"                },\r",
									"                \"text\": {\r",
									"                    \"$id\": \"#/properties/support/properties/text\",\r",
									"                    \"type\": \"string\",\r",
									"                    \"title\": \"The text schema\",\r",
									"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
									"                    \"default\": \"\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test('Schema Validation of the Response' , function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"ID is number\", ()=> {\r",
									"    pm.expect(response.data.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Email is String\", ()=> {\r",
									"    pm.expect(response.data.email).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"F.Name is String\", ()=> {\r",
									"    pm.expect(response.data.first_name).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}api/users/1",
							"host": [
								"{{url}}api"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://reqres.in/"
		}
	]
}